"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _immutabilityHelper = require("immutability-helper");

var _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);

var _cache = require("./cache");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function withData(actions) {
  function enhance(WrappedComponent) {
    var _class, _temp, _initialiseProps;

    return _temp = _class = function (_React$Component) {
      _inherits(_class, _React$Component);

      function _class(props) {
        _classCallCheck(this, _class);

        // Set all queries to { loading: true, refetch: getData() }
        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

        _initialiseProps.call(_this);

        var data = {};
        var actionNames = Object.keys(actions);
        actionNames.forEach(function (actionName) {
          data[actionName] = {
            loading: true,
            refetch: function refetch() {
              return _this.getData(actionName, { noCache: true });
            }
          };
        });
        _this.state = {
          data: data,
          polls: [],
          observeIds: []
        };
        return _this;
      }

      // Set data[actionName] from { loading: false } + the result of the request


      // Set data[actionName] from { loading: false } + the { error } generated by Axios


      _createClass(_class, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          // Request data for each query
          var actionNames = Object.keys(actions);
          actionNames.forEach(function (actionName) {
            return _this2.getData(actionName);
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          var _state = this.state,
              observeIds = _state.observeIds,
              polls = _state.polls;

          observeIds.forEach(function (cacheKey) {
            (0, _cache.unobserveData)(cacheKey);
          });
          polls.forEach(function (poll) {
            clearInterval(poll);
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(WrappedComponent, _extends({ data: this.state.data }, this.props));
        }
      }]);

      return _class;
    }(_react2.default.Component), _initialiseProps = function _initialiseProps() {
      var _this3 = this;

      this.goToPage = function (actionName, page) {
        _this3.setState(function (prevState) {
          return (0, _immutabilityHelper2.default)(prevState, {
            data: _defineProperty({}, actionName, { loading: { $set: true } })
          });
        }, _this3.getData(actionName, { page: page }));
      };

      this.onNext = function (actionName, data) {
        var loading = false;
        var goToPage = function goToPage(page) {
          return _this3.goToPage(actionName, page);
        };
        _this3.setState(function (prevState) {
          return (0, _immutabilityHelper2.default)(prevState, {
            data: _defineProperty({}, actionName, { $merge: _extends({ loading: loading, goToPage: goToPage }, data) })
          });
        });
      };

      this.onError = function (actionName, error) {
        var loading = false;
        var isAxiosError = Object.keys(error).includes("request"); // crude, but works
        if (isAxiosError) {
          _this3.setState(function (prevState) {
            return (0, _immutabilityHelper2.default)(prevState, {
              data: _defineProperty({}, actionName, { $merge: { loading: loading, error: error } })
            });
          });
        } else {
          throw error;
        }
      };

      this.getData = function (actionName) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var noCache = options.noCache,
            overrides = _objectWithoutProperties(options, ["noCache"]);

        var action = void 0;
        var childOptions = {};

        if (Array.isArray(actions[actionName])) {
          action = actions[actionName][0];
          childOptions = actions[actionName][1] || {};
        } else {
          action = actions[actionName];
        }

        (0, _cache.observeData)(actionName, function () {
          return action(_extends({}, _this3.props, overrides));
        }, function (data) {
          return _this3.onNext(actionName, data);
        }, function (error) {
          return _this3.onError(actionName, error);
        }, _extends({ noCache: noCache }, childOptions)).then(function (result) {
          if (Array.isArray(result)) {
            var _result = _slicedToArray(result, 2),
                observeId = _result[0],
                poll = _result[1];

            _this3.setState(function (prevState) {
              return (0, _immutabilityHelper2.default)(prevState, {
                observeIds: { $push: [observeId] },
                polls: { $push: [poll] }
              });
            });
          } else {
            var _observeId = result;
            _this3.setState(function (prevState) {
              return (0, _immutabilityHelper2.default)(prevState, {
                observeIds: { $push: [_observeId] }
              });
            });
          }
        });
      };
    }, _temp;
  }

  return enhance;
}

exports.default = withData;